---
title: "Kernel mixtures"
editor: 
  mode: source
---

{{< include ../_macros.qmd >}}

## Outline

### Topics

- Mixture of MCMC kernels
- Code implementation
- Mixtures preserve invariance

### Rationale

To prove invariance of MCMC algorithms, a common strategy is to 
"break down" the algorithm into simpler pieces, and to first prove 
invariance of each of the pieces. 

This pages shows one way we can establish invariance of the overall algorithm "for free" 
once we have established invariance of each of its parts. 

**Note:** we used mixtures in the context of [model building](../w10_modelling/topic07_mixtures.qmd). 
Here we use the same mathematical construction ("mixtures"), but in a different context, i.e. constructing and 
analyzing MCMC algorithms instead of model building.


## Mixture of MCMC kernels

### Example 

Let us use the simple beta-binomial example from [question 3 of exercise 7](../exercises/ex07.qmd). 

**Recall** the target is:

```{r}
#| eval: true
#| file: ../exercises/ex07_scaffold.R
```

### Intuition

- We will write an MCMC algorithm for the above beta-binomial model ($x$ in math notation will be `p` in the above code). 
- Suppose we want to use a [symmetric MH algorithm](../w08_mcmc1/topic04_mh.qmd) 
  with a normal proposal...
- ....but we are not sure if we should use a proposal with standard deviation 1 or 2
- Let $K_1$ denote the MH kernel with proposal standard deviation 1, and $K_2$, the MH kernel with proposal standard deviation 2. 
- Idea: at each MCMC iteration, suppose we start at $x$
    - Flip a coin, 
    - if heads, use $K_1$, i.e., $x' \sim K_1(\cdot | x)$,
    - if tails, $K_2$, i.e., $x' \sim K_2(\cdot | x)$.

### Coding up kernel mixtures

- We start by defining our kernels. 
- Calling the code below with `kernel(gamma, x, i)` corresponds to sampling from $K_i(\cdot | x)$

```{r}
#| eval: true
#| file: ../blocks/normal_mh_kernel.R
```

Based on these these kernels, 
here is an example how to implement the mixture:


```{r}

# simple Metropolis-Hastings algorithm (normal proposal)
mcmc_mixture = function(gamma, initial_point, n_iters) {
  samples = numeric(n_iters) 
  dim = length(initial_point)
  current_point = initial_point
  for (i in 1:n_iters) {
    
    kernel_index_choice = if (runif(1) < 0.5) 1 else 2
    current_point = kernel(gamma, current_point, kernel_index_choice)
    
    samples[i] = current_point
  }
  return(samples)
}

source("../blocks/plot_traces_and_hist.R")
samples = mcmc_mixture(gamma_beta_binomial, 0.5,  1000)
plot_traces_and_hist(samples)
```

### Mathematical notation for kernel mixtures

- Instead of using $K_1$ and $K_2$ with equal probability...
- ...let $\rho_1$ denote the probability to use $K_1$, 
- ...and $\rho_2 = 1 - \rho_1$. 

**Expression** for the mixture of the two kernels:
$$\Kmix(x' | x) = \sum_{i=1}^2 \rho_i K_i(x' | x). $$


## Invariance result

### Mixtures preserve invariance

**Proposition:** if $K_i$ are $\pi$-invariant, then their mixture is $\pi$-invariant. 

**Question:** can you prove this result? Convince yourself at the same time that the argument crucially depends on $\rho$
 not varying with the current state.


::: {.callout-caution collapse="true"} 
## Click for answer

\begin{align*}
\sum_x \pi(x) K(x' | x) &= \sum_x \pi(x) \sum_i \rho_i K_i(x' | x) \expl{def of mixture} \\
&=  \sum_i \rho_i  \sum_x \pi(x)  K_i(x' | x)  \\
&=  \sum_i \rho_i   \pi(x') \expl{invariance of each $K_i$}   \\
&=  \pi(x') \sum_i \rho_i     \\
&=  \pi(x') \expl{$\rho_i$ are probabilities}. \\
\end{align*}
:::


## Methodological application

**Question:** would it be a good idea to use the current state to adapt the mixture proportion (i.e., using $\rho_i(x)$ instead of $\rho_i$? 

{{< include ../../clickers/w12/_c07.qmd >}}