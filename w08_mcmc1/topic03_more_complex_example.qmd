---
title: "Stan: going further"
editor: 
  mode: source
---

{{< include ../_macros.qmd >}}

## Outline

### Topics

-   More complex types in Stan (vectors, constraints) 
-   Loops and vectorization
-   Feeding complex data into Stan

### Rationale

We review here the constructs needed to write more complex models such as 
[Q2 in the current exercise](../exercises/ex07.qmd), more similar exercises coming in the 
next weeks, and the second quiz. 


## Example 

We revisit the omicron modelling question from quiz 1. 

*The data consists, for each day in December 2021,
of the **percentage** of sequenced COVID-19 samples that are of the
Omicron variant.*


```{r}
suppressPackageStartupMessages(require(rstan))
suppressPackageStartupMessages(require(ggplot2))
suppressPackageStartupMessages(require(dplyr))

# data from: https://data.chhs.ca.gov/dataset/covid-19-variant-data
df = read.csv("../../quizzes/q1/covid19_variants.csv")
df$date = as.Date(df$date,format="%Y-%m-%d")

df = df %>% filter(date > "2021-12-01" & date < "2021-12-31") %>% filter(variant_name == "Omicron")

df %>% ggplot(aes(x = date, y = percentage)) + geom_point() + ylim(0, 100) + theme_minimal()
```


## Model (mathematical notation)

Recall one possible model we discussed after the quiz (with slightly different prior hyper-parameters): for $i \in \{1, 2, \dots, N\}$, $N$ being the number of days in December ($N=31$),[^1]

[^1]: In the model below, notice we normalize the day by $N$ to put it in the interval $[0, 1]$. This is not strictly necessary, but often,
  bringing covariates in a nice range can make sampling faster when it improves the 
  [condition number of the sampling problem](https://mc-stan.org/docs/stan-users-guide/efficiency-tuning.html#unit-scales-without-correlation).

\begin{align*}
\theta_0 &\sim \distExp(1) \\
\theta_1 &\sim \distNorm(0, \sigma = 1000) \\
\theta_2 &\sim \distNorm(0, \sigma = 1000) \\
\mu_i &= \text{logistic}(\theta_1 (i/N) + \theta_2) \\
y_i &\sim \distBeta(\mu_i, \theta_0) \\
\end{align*}


## Model (in Stan)

Let us translate the mathematical notation into Stan:

```{stan output.var = "omicron_first_attempt"}

// comments in Stan use '//' not '#'

data { 
  // Here `N` is the number of days considered. 
  int N; 
  
  // meaning: `y` is a vector of length `N` where each entry is between zero and one.
  vector<lower=0, upper=1>[N] y; 
}

// As before, we declare in `parameters` the types of the unobserved (latent) random variables. 
parameters { 
  real<lower=0> concentration; 
  real slope;
  real intercept;
}

model {
  concentration ~ exponential(1);
  slope ~ normal(0, 1000);
  intercept ~ normal(0, 1000);
  
  for (i in 1:N) { // Stan is 1-indexed
    // inv_logit is Stan's name for the logistic function
    y[i] ~ beta_proportion( # <1>
              inv_logit(intercept + slope * (i/N)), 
              concentration); 
  }
}

```
1. Here, `beta_proportion` corresponds to the [mean-concentration parameterization](https://mc-stan.org/docs/functions-reference/continuous_distributions_on_0_1.html#beta-proportion-distribution) we discussed [in the lecture on hierarchical models](../w06_hierarchical/topic03_hierarchy.qmd).


## Improving our model with generated parameters

- The code in the last section will not print out $\mu_i$ 
- The code below shows how to fix this
    - $\mu_i$ is handled differently than $\theta_k$, $y_i$...
    - ... because $\mu_i$ is defined with $=$ instead of $\sim$


```{stan output.var = "omicron"}

data { 
  int N; 
  vector<lower=0, upper=1>[N] y; 
}

parameters { 
  real<lower=0> concentration; 
  real slope;
  real intercept;
}

transformed parameters { # <1>
  // linspaced_vector(N,0,1) creates a vector 
  //    of N equispace points between 0 and 1
  //    (we normalize the dates to be between zero and one)
  // functions in Stan are typically vectorized, 
  //    this is the case for example with inv_logit
  vector[N] mu = 
    inv_logit(intercept + slope*linspaced_vector(N,0,1));
}

model { # <2>
  concentration ~ exponential(1);
  slope ~ normal(0, 1000);
  intercept ~ normal(0, 1000);
  
  // Another example of vectorization---the line below will produce the same 
  // output as the loop in the previous version, but slightly faster:
  y ~ beta_proportion(mu, concentration);
}

```
1. Whenever in the mathematical notation a latent random variable is defined using an **equality** ("$=$"), input it in the `transformed parameters` block.
2. Whenever in the mathematical notation a latent random variable is defined using a **distribution statement** ("$\sim$"), input it in the `model` block. 


## Running MCMC

Running MCMC on the model is done as before:[^2] 

[^2]: note we make sure no datapoints have value zero or one as under certain parameter values of the beta distribution, this can lead to a zero density point which Stan is not able to handle. 

```{r dependson=knitr::dep_prev()}
data_without_zeros = pmax(pmin(df$percentage/100,0.999),0.001)

fit = sampling(
  omicron, 
  data = list( # <1>
          y = data_without_zeros, 
          N = length(data_without_zeros)
        ), 
  chains = 1, # <2>
  iter = 10000       
)
```
1. Each variable in Stan's `data` block needs to be fed a value when called from R.
2. The `chains` options can be used to simulate several independent MCMC chains, more 
    precisely, this is available after calling the function 
    `options(mc.cores = parallel::detectCores())`. 


## Posterior visualization

We can extract samples as follows:

```{r}
samples = extract(fit)$mu
data = df$percentage
n_samples = nrow(samples)
```

and plot the posterior distribution over the beta's mean functions:

```{r}
xs = 1:length(data) / length(data)
plot(xs, data/100, 
      xlab = "Fraction of the month of December, 2021", 
      ylab = "Omicron fraction")

for (i in 1:n_samples) {
  lines(xs, samples[i,], col = rgb(red = 0, green = 0, blue = 0, alpha = 0.01))
}
```

## Model criticism 

What are potential weakness(es) of the model?

{{< include ../../clickers/w07/_c02.qmd >}}