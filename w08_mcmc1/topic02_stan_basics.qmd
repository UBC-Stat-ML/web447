---
title: "Stan basics"
editor: 
  mode: source
---

{{< include ../_macros.qmd >}}

## Outline

### Topics

-   Anatomy of a simple Stan program. 
-   Interpreting the output of Stan. 

### Rationale

We will write many Stan models in the coming weeks, so we will cover here the key concepts needed to write in Stan. Similarities with simPPLe will help in this process.


## Example

### Review: code in simPPLe and analytic answer

Let us revisit the [Doomsday model](../w03_ppl/topic03_continuous.qmd), which we wrote in simPPLe as follows:

::: column-margin
![](../images/doomsday.png){width="200"}
:::

```{r}
source("../../solutions/simple.R")

doomsday_model <- function() {
  x = simulate(Unif(0, 5))
  observe(0.06, Unif(0, x))
  return(x)
}

posterior(doomsday_model, 100000)
```


Recall the **analytic answer** [that we computed in clicker questions](../w03_ppl/topic03_continuous.qmd) was: $\approx 1.117$.


### Code in Stan

Today we will re-write this model in Stan instead of simPPLe. The main difference is that:

- both `simulate` and `observe` will be denoted by `~` in Stan,  
- to differentiate between observed and latent, Stan instead uses variable declarations (as `data` or `parameters`). 

First, load `rstan`:

```{r}
suppressPackageStartupMessages(require(rstan))
```

Then, [as you did to test your install](topic01_installing_stan.qmd#running) put the following code into a `.stan` file:

```{stan output.var = "doomsday"}
data { # <1>
  real y; 
}

parameters { # <2>
  real<lower=0, upper=5> x;
}

model {
  x ~ uniform(0, 5); # <3>
  y ~ uniform(0, x); # <4>
}

```
1. Variables introduced in a `data` block will be treated as observed. 
2. Variables introduced in a `parameters` block will be treated as latent, i.e., unobserved.   
3. Since `x` is declared latent (i.e., inside a `parameters` block), Stan will know to treat this as the counterpart of simPPLe's `x = simulate(Unif(0, 5))`.
4. Since `y` is declared observed (i.e., inside a `data` block), Stan will know to treat this as the counterpart of simPPLe's `observe(0.06, Unif(0, x))`.

**Question:** How does Stan gets the actual observed value $y = 0.06$? 

**Answer:** When Stan gets called in R:[^1]

[^1]: when calling Stan from an R script, use `stan(file = ...)`, but when calling Stan from R Markdown (as we do here), use `sampling(name, ...)`, where the first argument, `name` matches the code block argument `output.var = "name"` (see the [source of this page](https://github.com/UBC-Stat-ML/web447/blob/main/w08_mcmc1/topic02_stan_basics.qmd) for an example).

<!-- Note: dependson=knitr::dep_prev() needed as otherwise updates in the model will not invalidate the knitr cache properly -->
```{r message=FALSE, warning=FALSE, results=FALSE, dependson=knitr::dep_prev()}
fit = sampling(
  doomsday,         
  data = list(y = 0.06), # <1>
  chains = 1,
  iter = 100000       # <2>
)
```
1. Pass in the values taken by the observed random variables. 
2. The number of samples to compute (equivalent to $M$ in our [Monte Carlo notation](../w01_discrete_inference/topic11_monte_carlo.qmd))

We can now compare the approximation provided by Stan:

```{r}
fit
```


## Tips and tricks

- Notice statements in Stan have to end in semicolumns, `;` 
- To find out Stan's name for distributions, see [Stan's documentation](https://mc-stan.org/docs/functions-reference/index.html), 
    - e.g., [this is the documentation](https://mc-stan.org/docs/functions-reference/uniform-distribution.html) for `uniform`. 
    
    
## Interpreting the output 

- Just as [simple Monte Carlo](../w01_discrete_inference/topic11_monte_carlo.qmd) and [SNIS](../w03_ppl/topic02_snis.qmd), the output of Stan/MCMC is a list of *samples* 
- In contrast to SNIS, the samples are **equally weighted**, 
    - in other words, for MCMC we have $W^\parm = 1/M$,
    - i.e., their structure is the same as samples from [simple Monte Carlo](../w01_discrete_inference/topic11_monte_carlo.qmd)!
    
To access the samples from a "fit" object when calling Stan, use:

```{r}
samples = extract(fit)

head(samples$x)
```

As a sanity check, let's make sure all the samples are greater than the observed lower bound of $0.06$:

```{r}
min(samples$x)
```

**Question:** denote the samples output from Stan by $X^{(1)}, X^{(2)}, \dots, X^{(M)}$. What formula should you use to approximate 
$\ex[g(X) | Y = y]$ based on the Stan output?
    
{{< include ../../clickers/w08/_c01.qmd >}}


### Plotting histograms

Since the samples are equally weighted, this makes it simpler to create plots, e.g., for a histogram:

```{r}
hist(samples$x)
```

You can also use the `bayesplot` package which will be handy to create more complex plots from MCMC runs:

```{r}
suppressPackageStartupMessages(require(bayesplot))
mcmc_hist(fit, pars = c("x"))
```

