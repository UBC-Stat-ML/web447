---
title: "New Bayesian bricks"
editor: 
  mode: source
---

{{< include ../_macros.qmd >}}



## Outline

### Topics

- More distributions to complement [those tested in quiz 1](../w07_quiz1/topic03_logistics.qmd). 
- Motivation, realization and parameterization(s) for each. 

### Rationale

Recall our model building strategy: 

- start with observation, and find distribution that match its data type (this creates the likehood),
- then look at the data types of the parameters, and look for distribution that match the parameters' data type (this creates the prior),
- in the case of hierarchical models, recurse this process.

There are a few common data types for which we do not have talked much about distributions having 
realizations of that datatype. We now fill this gap.


## Counts

- Realization type: $\{0, 1, 2, 3, \dots\}$.

::: column-margin
![](https://upload.wikimedia.org/wikipedia/commons/8/83/Negbinomial.gif){width="200"}
:::


- Simple common choice is the **Poisson distribution**:
    - $\distPoiss(\lambda)$  
    - Parameter: Mean $\lambda > 0$.
    - Motivation:  [a special *point process*](https://en.wikipedia.org/wiki/Poisson_point_process). 
    - [Stan doc.](https://mc-stan.org/docs/functions-reference/unbounded_discrete_distributions.html#poisson)
    
- Popular alternative, e.g., in bio-informatics: the **negative binomial distribution**:
    - $\distNB(\mu, \phi)$
    - Mean parameter $\mu > 0$ and concentration $\phi > 0$. 
    - Motivation: when the variance is greater than the mean ("over-dispersion").
    - [Stan doc.](https://mc-stan.org/docs/functions-reference/unbounded_discrete_distributions.html#nbalt)


## Positive numbers

- Realization type: $\{x \in \reals: x > 0\} = \reals^+$

- More common choice is the **gamma distribution**:
    - $\distGam(\alpha, \beta)$
    - Parameters: Shape parameters $\alpha > 0$ and rate $\beta > 0$.
    - [Stan doc.](https://mc-stan.org/docs/functions-reference/positive_continuous_distributions.html#gamma-distribution)


**Question:** consider the following Stan model:

```{stan output.var = "gamma"}
data {
  int<lower=0> n_obs;
  vector<lower=0>[n_obs] observations;
}

parameters {
  real<lower=0> shape;
  real<lower=0> rate;
}

model {
  // priors
  shape ~ exponential(1.0/100);
  rate ~ exponential(1.0/100);
  
  // likelihood
  observations ~ gamma(shape, rate);
}
```

Notice that neither of the parameters passed in the likelihood can be interpreted as a mean. 
However, you are asked to report a mean parameter for the population from which the observations come from. 
How would you proceed?

```{stan output.var = "gamma_with_mean"}
data {
  int<lower=0> n_obs;
  vector<lower=0>[n_obs] observations;
}

parameters {
  real<lower=0> shape;
  real<lower=0> rate;
}

transformed parameters {
  real rao_blackwellized_mean = shape/rate;
}

model {
  // priors
  shape ~ exponential(1.0/100);
  rate ~ exponential(1.0/100);
  
  // likelihood
  observations ~ gamma(shape, rate);
}

generated quantities {
  real monte_carlo_mean = gamma_rng(shape, rate);
}
```


```{r}
suppressPackageStartupMessages(require(rstan))

set.seed(1)
observations = rgamma(5, shape = 2, rate = 3)
```


```{r dependson=knitr::dep_prev()}
fit = sampling(
  gamma_with_mean,
  seed = 1,
  refresh = 0,
  data = list(n_obs = length(observations), observations = observations),       
  iter = 100000                   
)
```

```{r}
fit
```

```{r}
5.91 / 6.63
```

<!-- clicker question: how to get the mean in a stan program? -->


## Categories

- Realization type: $\{0, 1, 2, 3, \dots, K\}$, for some number of categories $K$. 
- We first discussed it in [Exercise 3](../exercises/ex03.qmd). 
    - $\distCat(p_1, \dots, p_K)$
    - Probabilities $p_k > 0$, $\sum_k p_k = 1$.
    - [Stan doc.]()


## Simplex

- $\distDir(\alpha_1, \dots, \alpha_K)$
- Concentrations $\alpha_i > 0$    


## Vectors

- $\distNorm(\mu, \Sigma)$
- Mean vector $\mu \in \reals^K$, covariance matrix $\Sigma \succ 0$

<!-- mention precision, Cholesky --> 




## Many others!

### References

- Use wikipedia,
- and the Stan documentation.

### Alternative approach: reparameterization

TODO

<!-- clicker question: how to get the mean in a stan program? -->


