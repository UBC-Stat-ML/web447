---
title: "Custom bricks"
editor: 
  mode: source
---

{{< include ../_macros.qmd >}}


## Outline

### Topics

- What to do when you need a distribution not in the [Stan built-in library](https://mc-stan.org/docs/functions-reference/). 
- Understanding why Stan (and most MCMC methods) represents the density in log-scale. 


### Rationale

Even though Stan has a long list of built-in distribution, you will eventually run into a situation where you 
need a distribution not in the list. 

While learning how to do so, we will need to look more deeply at how Stan works under the hood. 


## Example

We will show how to implement the [Kumaraswamy distribution](https://en.wikipedia.org/wiki/Kumaraswamy_distribution) in Stan. 
As of March 2024, it is not in [Stan's built-in library](https://mc-stan.org/docs/functions-reference/). 

::: column-margin
![](https://upload.wikimedia.org/wikipedia/commons/9/9c/KumaraswamyT_pdf.svg){width="300"}
:::

The Kumaraswamy distribution has density:
$$f(x) = ab x^{a-1} (1 - x^a)^{b-1},$$
where $x \in (0, 1)$ and $a, b$ are positive parameters. 


## Executive version

- In the `model` block:
    - Use `target += [logarithm (base e) of the log density]`
    - Applying this to our Kumaraswamy example:
      $$\log(f(x)) = \log(a) + \log(b) + (a-1) \log(x) + (b-1) \log(1 - x^a).$$
      
- In the `parameters` block:
    - Make sure you enforce the support (here $x \in (0, 1)$)
    

```{r}
suppressPackageStartupMessages(require(rstan))
```


```{stan output.var = "Kumaraswamy"}
data {
  real<lower=0> a;
  real<lower=0> b;  
}

parameters {
  real<lower=0, upper=1> x; # <1>
}

model {
  target += log(a) + log(b) + (a-1) * log(x) + (b-1) * log1p(-x^a); # <2>
                                                    // ^ log1p(z) = log(1+z)
}
```
1. Support enforced. 
2. Contribution of the Kumaraswamy log density added the log joint density.

```{r dependson=knitr::dep_prev()}
fit = sampling(
  Kumaraswamy,
  seed = 1,
  refresh = 0,
  data = list(a = 2, b = 5),       
  iter = 10000                   
)
```

Checking that the histogram roughly matches the one from the wikipedia article (see [top of page Figure](topic03_custom_bricks.qmd), purple line).

```{r message=FALSE, warning=FALSE}
#| column: margin

suppressPackageStartupMessages(require(bayesplot))
suppressPackageStartupMessages(require(ggplot2))
mcmc_hist(fit, pars = c("x")) + theme_minimal()
```


## Explanation

### Log-scale computation

**Question:** why is Stan computing the **logarithm** of $\gamma(x)$?

**Key fact:** Stan, like most numerical methods, use [double-precision floating point](https://en.wikipedia.org/wiki/Floating-point_arithmetic) approximation of real numbers. 

- Suppose you have 500 observations.
- Each have a likelihood of about $1/10$. 
- What is the joint likelihood?

```{r}
likelihood = 1.0
for (i in 1:500) {
  likelihood = likelihood * (1/10)
}
likelihood
```

**Question:** Why R returns zero?

::: {.callout-caution collapse="true"} 
## Click for answer
- Because $(1/10)^{500}$ is smaller than the smallest positive number representeable in double precision ($\approx 10^{-300}$)
    - So it gets rounded to zero.
    - This is called **an underflow**
:::
    
**Log-scale computation:** let us say we store instead the **log**-likelihood:

```{r}
loglikelihood = log(1.0)
for (i in 1:500) {
  loglikelihood = loglikelihood + log(1/10)
}
loglikelihood
500*log(1/10)
```

- We have avoided the underflow issue!
- That's why a Stan program computes $\log \gamma(x)$ instead of $\gamma(x)$. 


## Encapsulation into a function

If you are using a custom density for several variables, encapsulate it into a function:

```{stan output.var = "Kumaraswamy2"}
functions { # <1>
  real Kumaraswamy_lpdf(real x, real a, real b) { # <2>
    return log(a) + log(b) + (a-1) * log(x) + (b-1) * log1p(-x^a);
  }
}

data {
  real<lower=0> a;
  real<lower=0> b;  
}

parameters {
  real<lower=0, upper=1> x; 
}

model {
  x ~ Kumaraswamy(a, b); # <3>
}
```
1. The `function` block allows you to create custom functions. See [the Stan documentation for more details.](https://mc-stan.org/docs/stan-users-guide/user-functions.html#basic-functions.section)
2. For Stan to pick up your function in its `~` syntax, you must use the special suffix `_lpdf` for your function name, which stands for "log probability density function."
3. Then you can use your distribution name using `~` as usual (notice we do not include the `_lpdf` when we do such call). From this it is apparent that Stan's `~` notation is just a shortcut for `target += distributionName_lpdf(...)`. 

```{r echo=FALSE, dependson=knitr::dep_prev()}
fit = sampling(
  Kumaraswamy2,
  seed = 1,
  refresh = 0,
  data = list(a = 2, b = 5),       
  iter = 10000                   
)
```

```{r echo=FALSE, message=FALSE, warning=FALSE}
#| column: margin

suppressPackageStartupMessages(require(bayesplot))
suppressPackageStartupMessages(require(ggplot2))
mcmc_hist(fit, pars = c("x")) + theme_minimal()
```
